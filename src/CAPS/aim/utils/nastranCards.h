// This software has been cleared for public release on 05 Nov 2020, case number 88ABW-2020-3462.

#ifndef __NASTRAN_CARDS_H__
#define __NASTRAN_CARDS_H__

#include "capsTypes.h"
#include "feaTypes.h" // Bring in FEA structures
#include "miscUtils.h"

#ifdef __cplusplus
extern "C" {
#endif


/*
 * AELIST
 * 
 * sid     Set identification number (Integer > 0)
 * e       List of aerodynamic boxes generated by CAERO entries (Integer > 0)
 * 
 * numE    Number of `e` values
 */
int nastranCard_aelist(FILE *fp, int *sid, int numE, int *e,
                       feaFileTypeEnum formatType);

/*
 * AERO
 *
 * acsid   Aerodynamic coordinate system identification (Integer >= 0)
 * velocityVelocity for aerodynamic force data recovert and to calculate the
 *         BOV parameter (Real)
 * refc    Reference length for reduced frequency (Real)
 * rhoref  Reference density (Real)
 * symxz   Symmetry key for the aero coordinate x-z plane 
 *         (Integer, one of: (+1, 0, -1), Default = 0)
 * symxy   Symmetry key for the aero coordinate x-y plane 
 *         (Integer, one of: (+1, 0, -1), Default = 0)
 */
int nastranCard_aero(FILE *fp, int *acsid, double *velocity, double *refc,
                     double *rhoref, int *symxz, int *symxy,
                     feaFileTypeEnum formatType);

/*
 * AEROS
 * 
 * acsid   Aerodynamic coordinate system identification (Integer > 0)
 * rcsid   Reference coordinate identification for rigid body motions
 *         (Integer > 0)
 * refc    Reference chord length (Real > 0.0)
 * refb    Reference span (Real > 0.0)
 * refs    Reference wing area (Real > 0.0)
 * symxz   Symmetry key for the aero coordinate x-z plane 
 *         (Integer, one of: (+1, 0, -1), Default = 0)
 * symxy   Symmetry key for the aero coordinate x-y plane 
 *         (Integer, one of: (+1, 0, -1), Default = 0)
 */
int nastranCard_aeros(FILE *fp, int *acsid, int *rcsid, double *refc,
                      double *refb, double *refs, int *symxz,
                      int *symxy, feaFileTypeEnum formatType);

/*
 * AESURF
 * 
 * id      Controller identification number (Integer > 0) [Ignored]
 * label   Controller name (Character)
 * cid     Identification number of rectangular coordinate system with
 *         a y-axis that defines the hinge line of the control surface
 *         component (Integer > 0)
 * alid    Identification of an AELIST bulk data entry that identifies
 *         all aerodynamic elements that make up the control surface
 *         component (Integer > 0)
 * eff     Control surface effectiveness (Real != 0; Default = 1.0)
 * ldw     Linear downwash flag (Either "LDW" or "NOLDW")
 * crefc   Reference chord length for the control surface 
 *         (Real >= 0.0, Default = 1.0)
 * crefs   Reference surface area for the control surface
 *         (Real >= 0.0, Default = 1.0)
 * pllim   Lower deflection limit for the control surface
 *         in radian (Real, Default = +- pi/2)
 * pulim   Upper deflection limit for the control surface
 *         in radian (Real, Default = +- pi/2)
 * hmllim  Lower hinge moment limit for the control surface
 *         in force-length units (Real, Default = Blank (no limit))
 * hmulim  Upper hinge moment limit for the control surface
 *         in force-length units (Real, Default = Blank (no limit))
 * tqllim  Set identification number of TABLED entry that provides the
 *         lower deflection limits for the control surface as a function
 *         of the dynamic pressure (Integer > 0, Default = Blank (no limit))
 * tqulim  Set identification number of TABLED entry that provides the
 *         upper deflection limits for the control surface as a function
 *         of the dynamic pressure (Integer > 0, Default = Blank (no limit))
 */
int nastranCard_aesurf(FILE *fp, int *id, char *label, int *cid, int *alid,
                       double *eff, char *ldw, int *crefc, int *crefs, 
                       double *pllim, double *pulim, double *hmllim, double *hmulim,
                       int *tqllim, int *tqulim, feaFileTypeEnum formatType);

/*
 * CAERO1
 *
 * eid     Element identification number (Integer > 0)
 * pid     Property identification number of a PAERO1 entry (Integer > 0)
 * cp      Coordinate system for location points 1 and 4 (Integer >= 0,
 *         or blank)
 * nspan   Number of spanwise boxes (Integer >= 0, or blank)
 * nchord  Number of chordwise boxes (Integer >= 0, or blank)
 * lspan   ID of an AEFACT data entry containing a list of division points
 *         for spanwise boxes. Only used if `nspan` is blank. (Integer > 0)
 * lchord  ID of an AEFACT data entry containing a list of division points
 *         for chordwise boxes. Only used if `nchord` is blank. (Integer > 0)
 * igid    Inference group identification (Integer > 0)
 * xyz1    
 * xyz4    Locations of point 1 and 4, in coordinate system `cp` (Real)
 * x12
 * x43     Edge chord lengths in aerodynamic coordinate system (Real >= 0.0,
 *         but not both zero)
 */
int nastranCard_caero1(FILE *fp, int *eid, int *pid, int *cp,
                       int *nspan, int *nchord, int *lspan, int *lchord,
                       int *igid, double xyz1[3], double xyz4[3],
                       double *x12, double *x43, 
                       feaFileTypeEnum formatType);

/*
 * CBAR
 */
int nastranCard_cbar(FILE *fp, int *eid, int *pid, int g[2], 
                     double x[3], int *g0, int *pa, int *pb,
                     double wa[3], double wb[3],
                     feaFileTypeEnum formatType);

/*
 * CDAMP2
 * 
 * eid     Unique element identification number (Integer > 0)
 * b       Value of the scalar damper (Real)
 * g1
 * g2      Geometric grid point identification number (Integer >= 0,
 *         or blank)
 * c1
 * c2      Component number(0 <= Integer <= 6, or blank)
 */
int nastranCard_cdamp2(FILE *fp, int *eid, double *b, int *g1, int *g2,
                       int *c1, int *c2, feaFileTypeEnum formatType);

/*
 * CELAS2
 *
 * eid     Unique element identification number (Integer > 0)
 * k       Stiffness of the scalar spring (Real)
 * g1
 * g2      Geometric grid point or scalar identification number 
 *         (Integer >= 0, or blank)
 * c1
 * c2      Component number(0 <= Integer <= 6, or blank)
 * ge      Damping coefficient (Real, or blank)
 * s       Stress coefficient (Real)
 */
int nastranCard_celas2(FILE *fp, int *eid, double *k, int *g1, int *g2,
                       int *c1, int *c2, double *ge, double *s,
                       feaFileTypeEnum formatType);

/*
 * CMASS2
 *
 * eid     Unique element identification number (Integer > 0)
 * m       Value of scalar mass (Real)
 * g1
 * g2      Geometric grid point or scalar identification number 
 *         (Integer >= 0, or blank)
 * c1
 * c2      Component number(0 <= Integer <= 6, or blank)
 */
int nastranCard_cmass2(FILE *fp, int *eid, double *m, int *g1, int *g2,
                       int *c1, int *c2, feaFileTypeEnum formatType);

/*
 * CONM2
 */
int nastranCard_conm2(FILE *fp, int *eid, int *g, int *cid, double *m,
                      double x[3], double i[6],
                      feaFileTypeEnum formatType);

/*
 * CORD2R
 */
int nastranCard_cord2c(FILE *fp, int *cid, int *rid, 
                       double a[3], double b[3], double c[3],
                       feaFileTypeEnum formatType);

/*
 * CORD2R
 */
int nastranCard_cord2r(FILE *fp, int *cid, int *rid, 
                       double a[3], double b[3], double c[3],
                       feaFileTypeEnum formatType);

/*
 * CORD2R
 */
int nastranCard_cord2s(FILE *fp, int *cid, int *rid, 
                       double a[3], double b[3], double c[3],
                       feaFileTypeEnum formatType);

/*
 * CQUAD4
 */
int nastranCard_cquad4(FILE *fp, int *eid, int *pid, int g[4], 
                       double *theta, int *mcid, double *zoffs,
                       double t[4], feaFileTypeEnum formatType);

/*
 * CQUAD8
 */
int nastranCard_cquad8(FILE *fp, int *eid, int *pid, int g[8], 
                       double *theta, int *mcid, double *zoffs,
                       double t[4], feaFileTypeEnum formatType);

/*
 * CSHEAR
 */
int nastranCard_cshear(FILE *fp, int *eid, int *pid, int g[4],
                       feaFileTypeEnum formatType);

/*
 * CTRIA3
 */
int nastranCard_ctria3(FILE *fp, int *eid, int *pid, int g[3], 
                       double *theta, int *mcid, double *zoffs,
                       double t[3], feaFileTypeEnum formatType);

/*
 * CTRIA6
 */
int nastranCard_ctria6(FILE *fp, int *eid, int *pid, int g[6], 
                       double *theta, int *mcid, double *zoffs,
                       double t[3], feaFileTypeEnum formatType);

/*
 * DCONADD
 */
int nastranCard_dconadd(FILE *fp, int *dcid, int numDC, int *dc,
                        feaFileTypeEnum formatType);

/*
 * DCONSTR
 *
 * dcid    Design constraint set identification number (Integer > 0)
 * rid     DRESPi entry identification number (Integer > 0)
 * lallow  Lower bound on the response quantity (Real, Default = -1.E20)
 * uallow  Upper bound on the response quantity (Real, Default =  1.E20)
 */
int nastranCard_dconstr(FILE *fp, int *dcid, int *rid,
                        double *lallow, double *uallow,
                        feaFileTypeEnum formatType);

/*
 * DDVAL
 */
int nastranCard_ddval(FILE *fp, int *id, int numDV, double *dval, 
                      feaFileTypeEnum formatType);

/*
 * DEQATN
 * 
 * eqid    Unique equation identification number (Integer > 0)
 * equationEquation(s). Array of equation strings no longer than 64
 *         chars, first one no longer than 56 chars)
 * 
 * numEquation  Number of `equation` values
 */
int nastranCard_deqatn(FILE *fp, int *eqid, int numEquation,
                       char **equation);

/*
 * DESVAR
 *
 * id      Unique design variable identification number (Integer > 0)
 * label   User-supplied name for printing purposes (Character)
 * xinit   Initial value (Real, `xlb` <= `xinit` <= `xub`)
 * xlb     Lower bound (Real, default = -1.E20)
 * xub     Upper bound (Real, default =  1.E20)
 * delxv   Fractional change allowed for the design variable during
 *         approximate optimization (Real >= 0, or blank)
 * ddval   DDVAL identification number (Integer > 0)
 */
int nastranCard_desvar(FILE *fp, int *id, char *label, double *xinit, 
                       double *xlb, double *xub, double *delxv, int *ddval,
                       feaFileTypeEnum formatType);

/*
 * DLINK
 *
 * id      Unique identification number (Integer > 0)
 * ddvid   Dependent design variable identification (Integer > 0)
 * c0      Constant term (Real, Default = 0.0)
 * cmult   Constant multiplier (Real, default = 1.0)
 * idv     Independent design variable identification numbers (Integer > 0)
 * c       Coefficients corresponding to `idv` (Real)
 *
 * numDV   Number of design variables to link
 */
int nastranCard_dlink(FILE *fp, int *id, int *ddvid, double *c0, 
                      double *cmult, int numDV, int *idv, double *c,
                      feaFileTypeEnum formatType);

/*
 * DMI
 * 
 * name    Name of the matrix (Character)
 * form    Form of matrix (Integer)
 * tin     Type of matrix being input (Integer)
 * tout    Type of matrix being output (Integer)
 * m       Number of rows (Integer > 0)
 * n       Number of columns (Integer > 0)
 * a       Real values (Real)
 * b       Imaginary values (Real)
 */
int nastranCard_dmi(FILE *fp, char *name, int *form, 
                    int *tin, int* tout, int m, int n, 
                    double *a, double *b,
                    feaFileTypeEnum formatType);

/*
 * DOPTPRM
 * 
 * param   Names of the design optimization parameters
 * val     Values of the paremeters
 * 
 * numParam  Number of params
 * paramType  Types of the values (Either 1: Integer or 2: Double)
 */
int nastranCard_doptprm(FILE *fp, int numParam, char **param,
                        int *paramType, void **val,
                        feaFileTypeEnum formatType);

/*
 * DRESP1
 *
 * id      Unique entry identifier (Integer > 0)
 * label   User-defined label (Character)
 * rtype   Response type (Character)
 * ptype   Element flag or property entry name (Character)
 * region  Region identifier for constraint screening (Integer > 0, or blank)
 * atta
 * attb
 * atts     Response attributes (Integer > 0 or Real or blank)
 * 
 * attaType  The type of `atta` entry (1: Integer or 2: Double)
 * attbType  The type of `attb` entry (1: Integer or 2: Double)
 * attsType  The type of `atts` entries (1: Integer or 2: Double)
 * numAtts  The number of `atts` values
 */
int nastranCard_dresp1(FILE *fp, int *id, char *label, char *rtype,
                       char *ptype, int *region, int attaType, void *atta,    
                       int attbType, void *attb, 
                       int attsType, int numAtts, void *atts,
                       feaFileTypeEnum formatType);

/*
 * DRESP2
 * 
 * id      Unique identification number (Integer > 0)
 * label   User-defined label (Character)
 * eqid    DEQATN entry identification number (Integer > 0)
 * region  Region identifier for constant screening (Integer > 0)
 * dvid    DESVAR entry identification numbers
 * labl    Labels for a constant in the DTABLE entry
 * nr      DRESP1 entry identification numbers
 * g       Grid point identification numbers
 * c       Degree of freedom numbers of grid points `g`
 * 
 * numDV   Number of `dvid` values
 * numLabl Number of `labl` values
 * numNR   Number of `nr` values
 * numG    Number of `g` and `c` values
 */
int nastranCard_dresp2(FILE *fp, int *id, char *label, int *eqid,
                       int *region, int numDV, int *dvid, int numLabl,
                       char **labl, int numNR, int *nr, int numG, 
                       int *g, int *c, int numNRR, int *nrr,
                       feaFileTypeEnum formatType);

/*
 * DTABLE
 * 
 * labl    Labels for the constants
 * valu    Values of the constants
 * 
 * numVal  Number of constants
 */
int nastranCard_dtable(FILE *fp, int numVal, char **labl, double *valu,
                       feaFileTypeEnum formatType);

/*
 * DVCREL1
 */
int nastranCard_dvcrel1(FILE *fp, int *id, char *type, int *eid,
                        char *cpname, double *cpmin, double *cpmax,
                        double *c0, int numDV, int *dvid, double *coeff,
                        feaFileTypeEnum formatType);

/*
 * DVMREL1
 */
int nastranCard_dvmrel1(FILE *fp, int *id, char *type, int *mid, 
                        char *mpname, double *mpmin, double *mpmax, 
                        double *c0, int numDV, int *dvid, double *coeff,
                        feaFileTypeEnum formatType);

/*
 * DVPREL1
 * 
 * id      Unique identification number (Integer > 0)
 * type    Name of property entry (Character)
 * pid     Property entry identification number (Integer > 0)
 * fid     Field position of the property entry, or word position in the
 *         element property table of the analysis model (Integer != 0)
 * pname   Property entry name, used if `fid` is NULL (Character)
 * pmin    Minimum value allowed for this property (Real, or blank)
 * pmax    Maximum value allowed for this property (Real, or blank)
 * c0      Constant term of relation (Real, Default = 1.0E20)
 * dvid    DESVAR entry identification numbers (Integer > 0)
 * coef    Coefficients of linear relation (Real)
 *
 * numDV   Number of design variables
 */
int nastranCard_dvprel1(FILE *fp, int *id, char *type, int *pid,
                        int *fid, char *pname, double *pmin, 
                        double *pmax, double *c0,
                        int numDV, int *dvid, double *coef,
                        feaFileTypeEnum formatType);

/*
 * EIGR
 * 
 * sid     Set identification number (Integer > 0)
 * method  Method of eigenvalue extraction (Character)
 * f1      
 * f2      Frequency range of interest (Real, or blank)
 * ne      Estimate of number of roots in range (Integer > 0, or blank)
 * nd      Desired number of roots (Integer >= 0, or blank)
 * norm    Method of normalizing eigenvectors (Character)
 * g       Grid or scalar point identification number (Integer > 0,
 *         or blank)
 * c       Component number (1 <= Integer <= 6, or blank)
 */
int nastranCard_eigr(FILE *fp, int *sid, char *method, double *f1,
                     double *f2, int *ne, int *nd, char *norm,
                     int *g, int *c, feaFileTypeEnum formatType);

/*
 * EIGRL
 */
int nastranCard_eigrl(FILE *fp, int *sid, double *v1, double *v2,
                      int *nd, int *msglvl, int *maxset,
                      double *shfscl, char *norm,
                      feaFileTypeEnum formatType);

/*
 * FLFACT
 */
int nastranCard_flfact(FILE *fp, int *sid, int numF, double *f,
                       feaFileTypeEnum formatType);

/*
 * FLUTTER
 */
int nastranCard_flutter(FILE *fp, int *sid, char *method, int *dens,
                        int *mach, int *rfreq, char *imeth, 
                        int *nvalue, double *eps, 
                        feaFileTypeEnum formatType);

/*
 * FORCE
 */
int nastranCard_force(FILE *fp, int *sid, int *g, int *cid,
                      double *f, double n[3], 
                      feaFileTypeEnum formatType);

/*
 * GRAV
 */
int nastranCard_grav(FILE *fp, int *sid, int *cid,
                     double *g, double n[3],
                     feaFileTypeEnum formatType);

/*
 * LOAD
 */
int nastranCard_load(FILE *fp, int *sid, double *s, int numL, 
                     double *ls, int *l, feaFileTypeEnum formatType);

/*
 * MAT1
 */
int nastranCard_mat1(FILE *fp, int *mid, double *e, double* g,
                     double *nu, double *rho, double *a, double *tref,
                     double *ge, double *st, double *sc, double *ss,
                     int *mcsid, feaFileTypeEnum formatType);

/*
 * MAT8
 */
int nastranCard_mat8(FILE *fp, int *mid, double *e1, double *e2,
                     double *nu12, double *g12, double *g1z, 
                     double *g2z, double *rho, double *a1, double *a2,
                     double *tref, double *xt, double *xc, 
                     double *yt, double *yc, double *s, double *ge,
                     double *f12, double *strn,
                     feaFileTypeEnum formatType);

/*
 * MKAERO1
 */
int nastranCard_mkaero1(FILE *fp, int numM, double *m, int numK,
                        double *k, feaFileTypeEnum formatType);

/*
 * MOMENT
 */
int nastranCard_moment(FILE *fp, int *sid, int *g, int *cid, double *m,
                       double n[3], feaFileTypeEnum formatType);

/*
 * PAERO1
 */
int nastranCard_paero1(FILE *fp, int *pid, int numB, int *b,
                       feaFileTypeEnum formatType);

/*
 * PBAR
 */
int nastranCard_pbar(FILE *fp, int *pid, int *mid, double *a,
                     double *i1, double *i2, double *i12, double *j,
                     double *nsm, double c[2], double d[2],
                     double e[2], double f[2], double *k1, double *k2, 
                     feaFileTypeEnum formatType);

/*
 * PBARL
 */
int nastranCard_pbarl(FILE *fp, int *pid, int *mid, char *type, 
                      double *f0, int numDim, double *dim, double *nsm,
                      feaFileTypeEnum formatType);

/*
 * PCOMP
 */
int nastranCard_pcomp(FILE *fp, int *pid, double *z0, double* nsm,
                      double *sb, char *ft, double *tref, double *ge,
                      char *lam, int numLayers, int *mid, double *t,
                      double *theta, char **sout, 
                      feaFileTypeEnum formatType);

/*
 * PLOAD2
 */
int nastranCard_pload2(FILE *fp, int *sid, double *p, int numE,
                       int *eid, feaFileTypeEnum formatType);

/*
 * PLOAD4
 */
int nastranCard_pload4(FILE *fp, int *sid, int *eid, double p[4],
                       int *g1, int *g3, int *cid, double n[3],
                       feaFileTypeEnum formatType);

/*
 * PROD
 */
int nastranCard_prod(FILE *fp, int *pid, int *mid, double *a, double *j,
                     double *c, double *nsm, 
                     feaFileTypeEnum formatType);

/*
 * PSHEAR
 */
int nastranCard_pshear(FILE *fp, int *pid, int *mid, double *t, 
                       double *nsm, double *f1, double *f2,
                       feaFileTypeEnum formatType);

/*
 * PSHELL
 */
int nastranCard_pshell(FILE *fp, int *pid, int *mid1, double *t,
                       int *mid2, double *i12t3, int *mid3, 
                       double *tst, double *nsm, double *z1, 
                       double *z2, int *mid4, 
                       feaFileTypeEnum formatType);

/*
 * PSOLID
 */
int nastranCard_psolid(FILE *fp, int *pid, int *mid, int *cordm,
                       char *in, char *stress, char *isop, char *fctn, 
                       feaFileTypeEnum formatType);

/*
 * RBE2
 */
int nastranCard_rbe2(FILE *fp, int *eid, int *gn, int *cm, 
                     int numGM, int *gm, feaFileTypeEnum formatType);

/*
 * RBE3
 */
int nastranCard_rbe3(FILE *fp, int *eid, int *refgrid, int *refc,
                     int numG, double *wt, int *c, int *g,
                     int numGM, int *gm, int *cm,
                     feaFileTypeEnum formatType);

/*
 * RFORCE
 */
int nastranCard_rforce(FILE *fp, int *sid, int *g, int *cid, double *a,
                       double r[3], int *method, double *racc,
                       feaFileTypeEnum formatType);

/*
 * SET1
 */
int nastranCard_set1(FILE *fp, int *sid, int numG, int *g,
                     feaFileTypeEnum formatType);

/*
 * SPC
 */
int nastranCard_spc(FILE *fp, int *sid, int numSPC, int *g, int *c,
                    double *d, feaFileTypeEnum formatType);

/*
 * SPC1
 */
int nastranCard_spc1(FILE *fp, int *sid, int *c, int numSPC, int *g,
                     feaFileTypeEnum formatType);

/*
 * SPCADD
 */
int nastranCard_spcadd(FILE *fp, int *sid, int numSPC, int *s,
                       feaFileTypeEnum formatType);

/*
 * SPLINE1
 */
int nastranCard_spline1(FILE *fp, int *eid, int *caero, int *box1, 
                        int *box2, int *setg, double *dz,
                        feaFileTypeEnum formatType);

/*
 * SUPORT
 */
int nastranCard_suport(FILE *fp, int numID, int *id, int *c,
                       feaFileTypeEnum formatType);

/*
 * SUPORT1
 */
int nastranCard_suport1(FILE *fp, int *sid, int numID, int *id, int *c,
                       feaFileTypeEnum formatType);

/*
 * TEMP
 */
int nastranCard_temp(FILE *fp, int *sid, int numG, int *g, double *t,
                     feaFileTypeEnum formatType);

/*
 * TEMPD
 */
int nastranCard_tempd(FILE *fp, int numSID, int *sid, double *t,
                      feaFileTypeEnum formatType);

/*
 * TRIM
 */
int nastranCard_trim(FILE *fp, int *id, double *mach, double *q,
                     int numVar, char **label, double *ux,
                     feaFileTypeEnum formatType);


#ifdef __cplusplus
}
#endif

#endif // __NASTRAN_CARDS_H__
