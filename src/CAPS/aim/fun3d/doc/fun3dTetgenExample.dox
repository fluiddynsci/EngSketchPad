/*!
\page fun3dTetgenExample FUN3D AIM Example

\tableofcontents
This is a walkthrough for using FUN3D AIM to analyze a three-dimensional two-wing configuration.

\section fun3daimPrereq Prerequisites
It is presumed that ESP and CAPS have been already installed, as well as FUN3D. In this example the open-source, tetrahedral
mesh generator, TetGen, is coupled to the FUN3D AIM to provide a volumetric mesh.

\subsection fun3dReqfiles Script files
Two scripts are used for this illustration:
    1. cfdMultiBody.csm: Creates geometry, as described in following section.
    2. fun3d_and_Tetgen_PyTest.py: pyCAPS script for performing analysis, as described in \ref fun3dPyCAPS.

\section createGeom Creating Geometry using ESP

The CSM script generates Bodies which are designed to be used by specific AIMs.
The AIMs that the Body is designed for is communicated to the CAPS framework via
the “capsAIM” string attribute. This is a semicolon-separated string with the list of
AIM names. Thus, the CSM author can give a clear indication to which AIMs should
use the Body. In this example, the list contains the list of mesh generators and CFD solvers that can consume the body:
\snippet cfdMultiBody.csm capsAIM

A typical geometry model can be created and interactively modified using design parameters. These design
parameters are either design- or geometry- based. In this example, a two wing
configuration is created using following design parameters,
\snippet cfdMultiBody.csm despmtrs
as well as the following configuration paramters. Configuration quantities cannot be used with sensitivities.
\snippet cfdMultiBody.csm cfgpmtrs

Next, internal CAPS reference attributes are set.
\snippet cfdMultiBody.csm capsAttributes

After our design parameters are defined they are used to setup other local variables
(analytically) for the wing.
\snippet cfdMultiBody.csm local

Once all design and locale variables are defined, a half span, solid model is created by "ruling" together NACA series
airfoils (following a series of scales, rotations, and translations).
\snippet cfdMultiBody.csm createWing

A full span model is then created by mirroring and joining the half-span model.
\snippet cfdMultiBody.csm mirror
\snippet cfdMultiBody.csm join

Once the desired model obtained it needs to be rotated so that it is in the expected aero-coordinated system (y- out the right
wing, x- in the flow direction, and +z- up).
\snippet cfdMultiBody.csm orient

Next, an attribute is then placed in the geometry so that the geometry components may be reference by the FUN3D AIM.
\snippet cfdMultiBody.csm attribute

Following the completion of the first wing, a second wing is created and scaled using the store/restore operations.
\snippet cfdMultiBody.csm secondWing

Finally, for three-dimensional CFD analysis with the FUN3D AIM a "farfield" or "bounding box" boundary needs to be provided.
In this example, a simple sphere is created and tagged as a farfield boundary using the capsGroup attribute.
\snippet cfdMultiBody.csm farfield

\section fun3dPyCAPS Performing analysis using pyCAPS
The first step in the pyCAPS script is to import the required modules. For this example, the following modules are
used,
\snippet fun3d_and_Tetgen_PyTest.py importModules

Similarly, local variables used throughout the script may be defined.
\snippet fun3d_and_Tetgen_PyTest.py localVariable

Once the required modules have been loaded, a pyCAPS.Problem can be instantiated
with the desired geometry file.
\snippet fun3d_and_Tetgen_PyTest.py loadGeom

Any design parameters available in *.csm file are also available within the pyCAPS script. The following snippet
changes the despmtr "area" which will force a rebuild of the geometry that FUN3D will now use.
\snippet fun3d_and_Tetgen_PyTest.py setGeom

A typical high-fidelity CFD analysis requires meshing AIMs to be coupled to the analysis AIM (unless a mesh already
exists).For surface meshing, the face tessellation from the ESP geometry can be directly used as the surface mesh.
If the face tessellation is not satisfactory, a surface meshing AIM may be coupled to the volume meshing AIM. In this example,
the face tessellation is used as the surface mesh and TetGen for volumetric mesh generation. The TetGen AIM in loaded using the
following
\snippet fun3d_and_Tetgen_PyTest.py loadMesh

Once loaded, the appropriate inputs to the mesh generator required to generate mesh with adequate mesh quality
are set. Refer TetGen AIM documentation for the list of all the available options.
\snippet fun3d_and_Tetgen_PyTest.py setMesh

In the case, the EGADS and TetGen AIMs execute in memory automatically. 

Next the FUN3D AIM needs to be loaded. 

\snippet fun3d_and_Tetgen_PyTest.py loadFUN3D

Once loaded analysis parameters specific to FUN3D need to be set (see \ref aimInputsFUN3D). These parameters are automatically converted into
FUN3D specific format and transferred into the FUN3D configuration file. 
In this example, the Volume_Mesh from TetGen AIM is
linked to the FUN3D Mesh input. This allows the volume mesh generated by the TetGen AIM to be transferred
by the FUN3D AIM, in which case FUN3D will write out the mesh in its preferred, native format.

Note in the following snippet the instance of
the AIM is referenced in two different manners: 1. Using the returned object from load call and 2. Using the "name"
reference in the analysis dictionary. While syntactically different, these two forms are essentially identical.

\snippet fun3d_and_Tetgen_PyTest.py setFUN3D

Along the same lines of setting the other input values the "Boundary_Condition" tuple is used to set the boundary conditions
(\ref cfdBoundaryConditions). These boundary tags (which reference capsGroup attributes in the *.csm file)
and associated boundary conditions are converted into FUN3D
specific boundary conditions and set in the FUN3D configuration file.
\snippet fun3d_and_Tetgen_PyTest.py setFUN3DBC

Again, after all desired options are set aimPreAnalysis needs to be executed.
\snippet fun3d_and_Tetgen_PyTest.py preAnalysisFUN3D

At this point the required files necessary run FUN3D should have be created and placed in the specified analysis working
directory. Next FUN3D needs to executed either through its Python interface module (not shown) or an OS system call such as,

\code{.py}
print ("\n\nRunning FUN3D......")
fun3d.system("nodet_mpi --animation_freq -1 --write_aero_loads_to_file> Info.out"); # Run fun3d via system call
\endcode

After FUN3D is finished running aimPostAnalysis needs to be executed.
\snippet fun3d_and_Tetgen_PyTest.py postAnalysiFUN3D

Finally, available AIM outputs (see \ref aimOutputsFUN3D) may be retrieved, for example:
\snippet fun3d_and_Tetgen_PyTest.py results

results in,

\code{.py}
Total Force - Pressure + Viscous
Cl =  0.671595 Cd =  0.517818
Cmx =  -0.002830832 Cmy =  -1.342669 Cmz =  -0.0020397
Cx =  0.5060182 Cy =  -0.004986118 Cz =  0.6805299
Pressure Contribution
Cl_p =  0.671595 Cd_p =  0.517818
Cmx_p =  -0.002830832 Cmy_p =  -1.342669 Cmz_p =  -0.0020397
Cx_p =  0.5060182 Cy_p =  -0.004986118 Cz_p =  0.6805299
Viscous Contribution
Cl_v =  0.0 Cd_v =  0.0
Cmx_v =  0.0 Cmy_v =  0.0 Cmz_v =  0.0
Cx_v =  0.0 Cy_v =  0.0 Cz_v =  0.0
\endcode


\section runfun3dTetgenExample Executing pyCAPS script
Issuing the following command executes the script:

\code
    python fun3d_and_Tetgen_PyTest.py
\endcode


Below are representative result images generated by the above script:
\image html FUN3D_Ex1.png "FUN3D coupled to TetGen example" width=500px
\image latex FUN3D_Ex1.png "FUN3D coupled to TetGen example" width=5cm

*/
