# helix1
# written by John Dannenhoffer

DESPMTR   rad       1.0   # radius of helix
DESPMTR   pitch     0.5   # pitch
CFGPMTR   nturn     2.5   # number of turns
CFGPMTR   toler     0.01  # fitting tolerance

DIMENSION urange    1 2
SET       urange    0;pi(2)*nturn

# try increasingly finer fits until tolerance is met
SET       nu        2
PATBEG    itry      8
   SET    nu        2*nu-1
   
   # get an array to hold coordinates
   DIMENSION xyz       nu   3

   # put points in array
   PATBEG    iu         nu
      SET    u          urange[1]+(urange[2]-urange[1])*(iu-1)/(nu-1)
      SET    xyz[iu,1]  rad*cos(u)
      SET    xyz[iu,2]  rad*sin(u)
      SET    xyz[iu,3]  pitch*u/pi(2)
   PATEND

   # generate helix
   UDPARG    freeform  imax  nu
   UDPARG    freeform  jmax  1
   UDPARG    freeform  kmax  1
   UDPRIM    freeform  xyz   xyz

   # compute rms error
   EVALUATE  edgerng @nbody 1
   SET       umin    @edata[1]
   SET       umax    @edata[2]

   SET       errrms  0
   PATBEG    i  3*nu+1
      SET      u      umin+(umax-umin)*(i-1)/(3*nu)
      EVALUATE edge   @nbody 1 u
      SET      u      urange[1]+(urange[2]-urange[1])*(i-1)/(3*nu)
      SET      err    hypot3(@edata[2]-rad*cos(u),@edata[3]-rad*sin(u),@edata[4]-pitch*u/pi(2))
      SET      errrms errrms+err*err
   PATEND
   SET         errrms sqrt(errrms/(3*nu+1))

   MESSAGE   !$nu____=_+val2str(nu,0)
   MESSAGE   !$errrms_=_+val2str(errrms,4)

   # break out if tolerance was met
   PATBREAK  toler-errrms

   # remove Body of tolerance not met
   STORE     .
PATEND

MESSAGE   !$nu____=_+val2str(nu,0)
MESSAGE   !$errrms_=_+val2str(errrms,4)
message   !val2str(@length,4)

END
