**************************************************************
*                                                            *
* Valid CSM statements                                       *
*                                                            *
**************************************************************

APPLYCSYS $csysname ibody=0
          use:    apply transformation given by a CSYSTEM
          pops:   any
          pushes: any
ARC       xend yend zend dist $plane=xy
          use:    create a new circular arc to the new point, with a
                     specified offset distance
          pops:   -
          pushes: -
ASSERT    arg1 arg2 toler=0 verify=0
          use:    return error if arg1 and arg2 differ
          pops:   -
          pushes: -
ATTRIBUTE $attrName attrValue
          use:    sets an Attribute for the Group on top of Stack
          pops:   any
          pushes: any
BEZIER    x y z
          use:    add a Bezier control point
          pops:   -
          pushes: -
BLEND     begList=0 endList=0 reorder=0 oneFace=0
          use:    create a Body by blending through Sketches since Mark
          pops:   Sketch1 ... Mark
          pushes: Body
BOX       xbase ybase zbase dx dy dz
          use:    create a box SolidBody or planar SheetBody
          pops:   -
          pushes: Body
CATBEG    sigCode
          use:    execute Block of Branches if current signal matches
                     sigCode
          pops:   -
          pushes: -
CATEND
          use:    designates the end of a CATBEG Block
          pops:   -
          pushes: -
CHAMFER   radius edgeList=0
          use:    apply a chamfer to a Body
          pops:   Body
          pushes: Body
CIRARC    xon yon zon xend yend zend
          use:    create a new circular arc, using the previous point
                     as well as the two points specified
          pops:   -
          pushes: -
COMBINE
          use:    combine Bodys since Mark into next higher type
          pops:   Body1 ... Mark
          pushes: Body
CONE      xvrtx yvrtx zvrtx xbase ybase zbase radius
          use:    create a cone Body
          pops:   -
          pushes: Body
CONNECT   faceList1 faceList2
          use:    connects two Bodys with bridging Faces
          pops:   Body1 Body2
          pushes: Body
COMPMTR   $pmtrName value
          use:    define a CONSTANT Parameter
          pops:   -
          pushes: -
CSYSTEM   $csysName csysList
          use:    attach a Csystem to Body on top of stack
          pops:   any
          pushes: any
CYLINDER  xbeg ybeg zbeg xend yend zend radius
          use:    create a cylinder Body
          pops:   -
          pushes: Body
DESPMTR   $pmtrName values
          use:    define a (constant) EXTERNAL design Parameter
          pops:   -
          pushes: -
DIMENSION $pmtrName nrow ncol despmtr=0
          use:    set up or redimensions an array Parameter
          pops:   -
          pushes: -
DUMP      $filename remove=0 toMark=0
          use:    write a file that contains the Body
          pops:   Body1 (if remove=1)
          pushes: -
             .brep .bstl .egads .egg  .iges  .igs
             .sens .step .stl   .stp  .tess  .ugrid
ELSE
          use:    execute or skip a Block of Branches
          pops:   -
          pushes: -
ELSEIF    val1 $op1 val2 $op2=and val3=0 $op3=eq val4=0
          use:    execute or skip a sequence of Branches
          pops:   -
          pushes: -
END
          use:    signifies end of .csm or .udc file
          pops:   -
          pushes: -
ENDIF
          use:    terminates an Ifthen Block of Branches
          pops:   -
          pushes: -
EXTRACT   index
          use:    extract a Face or Edge from a Body
          pops:   Body1
          pushes: Body
EXTRUDE   dx dy dz
          use:    create a Body by extruding a Sketch
          pops:   Sketch
          pushes: Body
FILLET    radius edgeList=0
          use:    apply a fillet to a Body
          pops:   Body
          pushes: Body
GETATTR   $pmtrName attrID
          use:    store an Attribute value(s) in an INTERNAL Parameter
          pops:   -
          pushes: -
GROUP     nbody=0
          use:    create a Group of Bodys since Mark for subsequent
                     transformations
          pops:   Body1 ... Mark  -or-  Body1 ...
          pushes: Body1 ...
HOLLOW    thick entList=0 listStyle=0
          use:    hollow out a SolidBody or SheetBody
          pops:   Body
          pushes: Body
IFTHEN    val1 $op1 val2 $op2=and val3=0 $op3=eq val4=0
          use:    execute or skip a Block of Branches
          pops:   -
          pushes: -
             $op1 & $op3: LT LE EQ GE GT NE;  $op2: OR AND
IMPORT    $filename bodynumber=1
          use:    import from filename
          pops:   -
          pushes: Body
INTERFACE $argName $argType default
          use:    defines an argument for a .udc file
          pops:   -
          pushes: -
INTERSECT $order=none index=1 maxtol=0
          use:    perform Boolean intersection (Body2 & Body1)
          pops:   Body1 Body2
          pushes: Body
JOIN      toler=0
          use:    join two Bodys at a common Edge or Face
          pops:   Body1 Body2
          pushes: Body
LBOUND    $pmtrName bounds
          use:    defines a lower bound for a design Parameter
          pops:   -
          pushes: -
LINSEG    x y z
          use:    create a new line segment, connecting the previous
                     and specified points
          pops:   -
          pushes: -
LOFT*     smooth
          use:    create a Body by lofting through Sketches since Mark
          pops:   Sketch1 ... Mark
          pushes: Body
MACBEG*   imacro
          use:    marks the start of a macro
          pops:   -
          pushes: -
MACEND*
          use:    ends a macro
          pops:   -
          pushes: -
MARK
          use:    used to identify groups such as in RULE, BLEND, or GROUP
          pops:   -
          pushes: -
MIRROR    nx ny nz dist=0
          use:    mirrors Group on top of Stack
          pops:   any
          pushes: any
NAME      $branchName
          use:    names the entry on top of Stack
          pops:   any
          pushes: any
PATBEG    $pmtrName ncopy
          use:    execute a Block of Branches ncopy times
          pops:   -
          pushes: -
PATBREAK  expr
          use:    break out of inner-most Patbeg Block if expr>0
          pops:   -
          pushes: -
PATEND
          use:    designates the end of a Patbeg Block
          pops:   -
          pushes: -
POINT     xloc yloc zloc
          use:    create a single point Body
          pops:   -
          pushes: Body
PROJECT   x y z dx dy dz useEdges=0
          use:    find the first projection from given point in given
                     direction
          pops:   -
          pushes: -
RECALL*   imacro
          use:    recalls copy of macro from a storage location imacro
          pops:   -
          pushes: any
REORDER   ishift iflip=0
          use:    change the order of Edges in a Body
          pops:   Body1
          pushes: Body
RESTORE   $name index=0
          use:    restores Body(s) that was/were previously stored
          pops:   -
          pushes: any
REVOLVE   xorig yorig zorig dxaxis dyaxis dzaxis angDeg
          use:    create a Body by revolving a Sketch around an axis
          pops:   Sketch
          pushes: Body
ROTATEX   angDeg yaxis zaxis
          use:    rotates Group on top of Stack around x-like axis
          pops:   any
          pushes: any
ROTATEY   angDeg zaxis xaxis
          use:    rotates Group on top of Stack around y-like axis
          pops:   any
          pushes: any
ROTATEZ   angDeg xaxis yaxis
          use:    rotates Group on top of Stack around y-like axis
          pops:   any
          pushes: any
RULE      reorder=0
          use:    create a Body by creating ruled surfaces thru Sketches
                     since Mark
          pops:   Sketch1 ... Mark
          pushes: Body
SCALE     fact
          use:    scales Group on top of Stack
          pops:   any
          pushes: any
SELECT
          use:    selects entity for which @-parameters are evaluated
          pops:   -
          pushes: -
             BODY
             BODY ibody
             FACE
             FACE iface
             FACE ibody1 iford1 iseq=1
             FACE $attrName1 $attrValue1 $attrName2=* $attrValue2=*
                                         $attrName3=* $attrValue3=*
             EDGE
             EDGE iedge
             EDGE ibody1 iford1 ibody2 iford2 iseq=1
             EDGE $attrName1 $attrValue1 $attrName2=* $attrValue2=*
                                         $attrName3=* $attrValue3=*
             NODE
             NODE inode=0
             NODE $attrName1 $attrValue1 $attrName2=* $attrValue2=*
                                         $attrName3=* $attrValue3=*
             ADD  ibody1 iford1 iseq=1                (if @seltype==2)
             ADD  ibody1 iford1 ibody2 iford2 iseq=1  (if @seltype==1)
             ADD  $attrName1 $attrValue1 $attrName2=* $attrValue2=*
                                         $attrName3=* $attrValue3=*
             SUB  ibody1 iford1 iseq=1                (if @seltype==2)
             SUB  ibody1 iford1 ibody2 iford2 iseq=1  (if @seltype==1)
             SUB  $attrName1 $attrValue1 $attrName2=* $attrValue2=*
                                         $attrName3=* $attrValue3=*
SET       $pmtrName exprs
          use:    define a (redefinable) INTERNAL Parameter
          pops:   -
          pushes: -
SKBEG     x y z relative=0
          use:    start a new Sketch with the given point
          pops:   -
          pushes: -
SKCON     $type index1 index2=-1 $value=0
          use:    creates a Sketch constraint
          pops:   -
          pushes: -
SKEND     wireonly=0
          use:    completes a Sketch
          pops:   -
          pushes: Sketch
SKVAR     $type valList
          use:    create multi-valued Sketch variables and their initial
                     values
          pops:   -
          pushes: -
SOLBEG    $varList
          use:    starts a Solver Block
          pops:   -
          pushes: -
SOLCON    $expr
          use:    constraint used to set Solver parameters
          pops:   -
          pushes: -
SOLEND
          use:    designates the end of a Solver Block
          pops:   -
          pushes: -
SPHERE    xcent ycent zcent radius
          use:    create a sphere Body
          pops:   -
          pushes: Body
SPLINE    x y z
          use:    add a point to a spline
          pops:   -
          pushes: -
STORE     $name index=0 keep=0
          use:    stores Group on top of Stack
          pops:   any
          pushes: -
SUBTRACT  $order=none index=1 maxtol=0
          use:    perform Boolean subtraction (Body2 - Body1)
          pops:   Body1 Body2
          pushes: Body
SWEEP
          use:    create a Body by sweeping a Sketch along a Sketch
          pops:   Sketch1 Sketch2
          pushes: Body
THROW     sigCode
          use:    set current signal to sigCode
          pops:   -
          pushes: -
TORUS     xcent ycent zcent dxaxis dyaxis dzaxis majorRad minorRad
          use:    create a torus Body
          pops:   -
          pushes: Body
TRANSLATE dx dy dz
          use:    translates Group on top of Stack
          pops:   any
          pushes: any
UBOUND    $pmtrName bounds
          use:    defines an upper bound for a design Parameter
          pops:   -
          pushes: -
UDPARG    $primtype $argName1 argValue1 $argName2 argValue2
                    $argName3 argValue3 $argName4 argValue4
          use:    pre-set arguments for next UDPRIM statement
          pops:   -
          pushes: -
UDPRIM    $primtype $argName1 argValue1 $argName2 argValue2
                    $argName3 argValue3 $argName4 argValue4
          use:    create a Body by executing a UDP, UDC, or UDF
          pops:   -
          pushes: Body
UNION     toMark=0 trimList=0 maxtol=0
          use:    perform Boolean union
          pops:   Body1 Body2  -or-  Body1 ... Mark
          pushes: Body


**************************************************************
*                                                            *
* Parameter rules                                            *
*                                                            *
**************************************************************

Valid names:
    start with a letter, colon(:), or at-sign(@)
    contains letters, digits, at-signs(@), underscores(_), and colons(:)
    contains fewer than 32 characters
    names that start with an at-sign cannot be set by a CONPMTR, DESPMTR,
       or SET statement
    if a name has a dot-suffix, a property of the name (and not its
        value) is returned
       x.nrow   number of rows     in x or 0 if a string
       x.ncol   number of columns  in x or 0 if a string
       x.size   number of elements in x (=x.nrow*x.ncol) or
                     length of string x
       x.sum    sum of elements    in x
       x.norm   norm of elements   in x (=sqrt(x[1]^2+x[2]^2+...))
       x.min    minimum value      in x
       x.max    maximum value      in x

Array names:
    basic format is: name[irow,icol] or name[ielem]
    name must follow rules above
    irow, icol, and ielem must be valid expressions
    irow, icol, and ielem start counting at 1
    values are stored across rows ([1,1], [1,2], ..., [2,1], ...)

Types:
    CONSTANT
       declared and defined by a CONPMTR statement
       must be a scalar
        is only available at the .csm file level
        can be set  outside ocsmBuild by a call to ocsmSetValu
        can be read outside ocsmBuild by a call to ocsmGetValu
    EXTERNAL
        if a scalar, declared and defined by a DESPMTR statement
        if an array, declared by a DIMENSION statement (with despmtr=1)
                     values defined by one or more DESPMTR statements
        each value can only be defined in one DESPMTR statement
        can have an optional lower bound
        can have an optional upper bound
        is only available at the .csm file level
        can be set  outside ocsmBuild by a call to ocsmSetValu
        can be read outside ocsmBuild by a call to ocsmGetValu
    INTERNAL
        if a scalar, declared and defined by a SET statement
        if an array, declared by a DIMENSION statement (with despmtr=0)
                     values defined by one or more SET statements
        values can be overwritten by subsequent SET statements
        are created by an INTERFACE statement in a .udc file
        see scope rules (below)
    SOLVER
        not implemented yet

    @-parameters depend on the last SELECT statement(s).
        each time a new Body is added to the Stack, 'SELECT body' is
            implicitly called
        depending on last SELECT statement, the values of the
             @-parameters are given by:

               body face edge node  <- last SELECT

        @seltype -1    2    1    0   selection type (0=node,1=edge,2=face)
        @selbody  x    -    -    -   current Body
        @sellist -1    x    x    x   list of Nodes/Edges/Faces

        @nbody    x    x    x    x   number of Bodys
        @ibody    x    x    x    x   current   Body
        @nface    x    x    x    x   number of Faces in @ibody
        @iface   -1    x   -1   -1   current   Face  in @ibody (or -2)
        @nedge    x    x    x    x   number of Edges in @ibody
        @iedge   -1   -1    x   -1   current   Edge  in @ibody (or -2)
        @nnode    x    x    x    x   number of Nodes in @ibody
        @inode   -1   -1   -1    x   current   Node  in @ibody (or -2)
        @igroup   x    x    x    x   group of @ibody

        @ibody1  -1    x    x   -1   1st element of 'Body' Attr in @ibody
        @ibody2  -1    x    x   -1   2nd element of 'Body' Attr in @ibody

        @xmin     x    x    *    x   x-min of bboxes or x at beg of Edge
        @ymin     x    x    *    x   y-min of bboxes or y at beg of Edge
        @zmin     x    x    *    x   z-min of bboxes or z at beg of Edge
        @xmax     x    x    *    x   x-max of bboxes or x at end of Edge
        @ymax     x    x    *    x   y-max of bboxes or y at end of Edge
        @zmax     x    x    *    x   z-max of bboxes or z at end of Edge

        @length   0    0    x    0   length of Edges
        @area     x    x    0    0   area of Faces or surface area of body
        @volume   x    0    0    0   volume of body (if a solid)

        @xcg      x    x    x    x   location of center of gravity
        @ycg      x    x    x    x
        @zcg      x    x    x    x

        @Ixx      x    x    x    0   centroidal moment of inertia
        @Ixy      x    x    x    0
        @Ixz      x    x    x    0
        @Iyx      x    x    x    0
        @Iyy      x    x    x    0
        @Iyz      x    x    x    0
        @Izx      x    x    x    0
        @Izy      x    x    x    0
        @Izz      x    x    x    0

        in above table:
           x -> value is set
           - -> value is unchanged
           * -> special value is set (if single Edge)
           0 -> value is set to  0
          -1 -> value is set to -1

Scope:
    CONSTANT parameters are available everywhere
    EXTERNAL parameters are only usable within the .csm file
    INTERNAL within a .csm file
                created by a DIMENSION or SET statement
                values are usable only within the .csm file
             within a .udc file
                created by an INTERFACE of SET statament
                values are usable only with the current .udc file
    SOLVER   parameters are only accessible between SOLBEG and
                SOLEND statements


**************************************************************
*                                                            *
* Expression rules                                           *
*                                                            *
**************************************************************

Valid operators (in order of precedence):
    ( )            parentheses, inner-most evaluated first
    func(a,b)      function arguments, then function itself
    ^              exponentiation             (evaluated left to right)
    * /            multiply and divide        (evaluated left to right)
    + -            add/concat and subtract    (evaluated left to right)

Valid function calls:
    pi(x)                        3.14159...*x
    min(x,y)                     minimum of x and y
    max(x,y)                     maximum of x and y
    sqrt(x)                      square root of x
    abs(x)                       absolute value of x
    int(x)                       integer part of x  (3.5 -> 3, -3.5 -> -3)
                                     produces derivative=0
    nint(x)                      nearest integer to x
                                     produces derivative=0
    ceil(x)                      smallest integer not less than x
                                     produces derivative=0
    floor(x)                     largest integer not greater than x
                                     produces derivative=0
    mod(a,b)                     mod(a/b), with same sign as a and b>=0
    sign(test)                   returns -1, 0, or +1
                                     produces derivative=0
    exp(x)                       exponential of x
    log(x)                       natural logarithm of x
    log10(x)                     common logarithm of x
    sin(x)                       sine of x          (in radians)
    sind(x)                      sine of x          (in degrees)
    asin(x)                      arc-sine of x      (in radians)
    asind(x)                     arc-sine of x      (in degrees)
    cos(x)                       cosine of x        (in radians)
    cosd(x)                      cosine of x        (in degrees)
    acos(x)                      arc-cosine of x    (in radians)
    acosd(x)                     arc-cosine of x    (in degrees)
    tan(x)                       tangent of x       (in radians)
    tand(x)                      tangent of x       (in degrees)
    atan(x)                      arc-tangent of x   (in radians)
    atand(x)                     arc-tangent of x   (in degrees)
    atan2(y,x)                   arc-tangent of y/x (in radians)
    atan2d(y,x)                  arc-tangent of y/x (in degrees)
    hypot(x,y)                   hypotenuse: sqrt(x^2+y^2)
    hypot3(x,y,z)                hypotenuse: sqrt(x^2+y^2+z^2)
    incline(xa,ya,dab,xb,yb)     inclination of chord (in degrees)
                                     produces derivative=0
    Xcent(xa,ya,dab,xb,yb)       X-center of circular arc
                                     produces derivative=0
    Ycent(xa,ya,dab,xb,yb)       Y-center of circular arc
                                     produces derivative=0
    Xmidl(xa,ya,dab,xb,yb)       X-point at midpoint of circular arc
                                     produces derivative=0
    Ymidl(xa,ya,dab,xb,yb)       Y-point at midpoint of circular arc
                                     produces derivative=0
    seglen(xa,ya,dab,xb,yb)      length of segment
                                     produces derivative=0
    radius(xa,ya,dab,xb,yb)      radius of curvature (or 0 for LINSEG)
                                     produces derivative=0
    sweep(xa,ya,dab,xb,yb)       sweep angle of circular arc (in degrees)
                                     produces derivative=0
    turnang(xa,ya,dab,xb,yb,...
                     dbc,xc,yc)  turnnig angle at b (in degrees)
                                     produces derivative=0
    dip(xa,ya,xb,yb,rad)         acute dip between arc and chord
                                     produces derivative=0
    smallang(x)                  ensures -180<=x<=180
    val2str(num,digits)          convert num to string
    str2val(string)              convert string to value
    findstr(str1,str2)           find locn of str2 in str1 (bias-1 or 0)
    slice(str,ibeg,iend)         substring of str from ibeg to iend
                                     (bias-1)
    ifzero(test,ifTrue,ifFalse)  if test=0, return ifTrue, else ifFalse
    ifpos(test,ifTrue,ifFalse)   if test>0, return ifTrue, else ifFalse
    ifneg(test,ifTrue,ifFalse)   if test<0, return ifTrue, else ifFalse
    ifmatch(str,pat,ifTrue,...
                      ifFalse)   if str match pat, return ifTrue,
                                     else ifFalse
                                        ? matches any one character
                                       '+ matches one  or more characters
                                        * matches zero or more characters
    ifnan(test,ifTrue,ifFalse)   if test is NaN, return ifTrue,
                                     else ifFalse


**************************************************************
*                                                            *
* Attribute rules (accessible through EGADS)                 *
*                                                            *
**************************************************************

EGADS Attributes assigned to Bodys:

    _body       Body index (bias-1)

    _brch       Branch index (bias-1)

    _tParams    tessellation parameters

    _csys_*     arguments when CSYSTEM was defined

    <any>       all global Attributes

    <any>       all Attributes associated with Branch that created Body

    <any>       all Attributes associated with "SELECT $body" statement

                Note: if the Attribute name is "_name" then its
                      corresponding value is used as its name in ESP

EGADS Attributes assigned to Faces:

    _body       non-unique 2-tuple associated with first Face creation
        [0]     Body index in which Face first existed (bias-1)
        [1]     face-order associated with creation (see above)

    _brch       non-unique even-numbered list associated with Branches
                   that are active when the Face is created (most
                   recent Branch is listed first)
        [2*i  ] Branch index (bias-1)
        [2*i+1] (see below)

                Branches that contribute to brch Attribute are
                   primitive  (for which _brch[2*i+1] is face-order)
                   UDPRIM.udc (for which _brch[2*i+1] is 1)
                   grown      (for which _brch[2*i+1] is face-order)
                   applied    (for which _brch[2*i+1] is face-order)
                   sketch     (for which _brch[2*i+1] is Sketch primitive
                               if making WireBody)
                   PATBEG     (for which _brch[2*i+1] is pattern index)
                   IFTHEN     (for which _brch[2*i+1] is -1)
                   RECALL     (for which _brch[2*i+1] is +1)
                   RESTORE    (for which _brch[2*i+1] is Body num stored)

    _faceID     unique 3-tuple that is assigned automatically
          [0]   _body[0]
          [1]   _body[1]
          [2]   sequence number

                if multiple Faces have same _faceID[0] and _faceID[1],
                   then the sequence number is defined based upon the
                   first rule that applies:
                   * Face with smaller xcg  has lower sequence number
                   * Face with smaller ycg  has lower sequence number
                   * Face with smaller zcg  has lower sequence number
                   * Face with smaller area has lower sequence number

    _hist       list of Bodys that contained this Face (oldest to newest)

    <any>       all Attributes associated with Branch that first
                    created Face
                    (BOX, CONE, CYLINDER, IMPORT, SPHERE, TORUS, UDPRIM)
                    (BLEND, EXTRUDE, LOFT, REVOLVE, RULE, SWEEP)
                    (SKEND)
                    (CHAMFER, CONNECT, FILLET, HOLLOW)

    <any>       all Attributes associated with Branch if a RESTORE
                    statement

    <any>       all Attributes associated with "SELECT $face" statement

                Note: if the Attribute name is "_color" then the Face is
                      colored in ESP if the Attribute value is "red",
                      "green", "blue", "yellow", "magenta", "cyan",
                      "white", "black" or a 3-tuple that contains values
                      between 0 and 1 for the rgb components

EGADS Attributes assigned to Edges:

    _body       non-unique 2-tuple associated with first Edge creation
        [0]     Body index in which Edge first existed (bias-1)
        [1]     100 * min(_body[1][ileft],_body[1][irite])
                    + max(_body[1][ileft],_body[1][irite])
                (or -3 if non-manifold)

    _edgeID     unique 5-tuple that is assigned automatically
          [0]   _faceID[0] of Face 1 (or 0 if non-manifold)
          [1]   _faceID[1] of Face 1 (or 0 if non-manifold)
          [2]   _faceID[0] of Face 2 (or 0 if non-manifold)
          [3]   _faceID[1] of Face 2 (or 0 if non-manifold)
          [4]   sequence number

                _edgeID[0]/[1] swapped with edge[2]/[3]
                   100*_edgeID[0]+_edgeID[1] > 100*_edgeID[2]+_edgeID[3]
                if multiple Edges have same _edgeID[0], _edgeID[1],
                   _edgeID[2], and _edgeID[3], then the sequence number
                   is defined based upon the first rule that applies:
                   * Edge with smaller xcg    has lower sequence number
                   * Edge with smaller ycg    has lower sequence number
                   * Edge with smaller zcg    has lower sequence number
                   * Edge with smaller length has lower sequence number

    <any>       all Attributes associated with "SELECT $edge" statement

EGADS Attributes assigned to Nodes:

    _nodeID     not assigned at this time

    <any>       all Attributes associated with "SELECT $node" statement
